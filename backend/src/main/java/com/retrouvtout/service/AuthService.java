package com.retrouvtout.service;

import com.retrouvtout.dto.request.LoginRequest;
import com.retrouvtout.dto.request.RegisterRequest;
import com.retrouvtout.dto.response.AuthResponse;
import com.retrouvtout.dto.response.UserResponse;
import com.retrouvtout.entity.User;
import com.retrouvtout.repository.UserRepository;
import com.retrouvtout.security.JwtTokenProvider;
import com.retrouvtout.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

/**
 * ‚úÖ SERVICE D'AUTHENTIFICATION ULTRA-ROBUSTE
 * Gestion compl√®te des erreurs avec logs d√©taill√©s
 */
@Service
@Transactional
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider tokenProvider;
    private final EmailService emailService;
    private final ModelMapper modelMapper;

    @Value("${app.jwt.expiration:86400000}")
    private long jwtExpirationInMs;

    @Value("${app.jwt.refresh-expiration:604800000}")
    private long refreshTokenExpirationInMs;

    @Autowired
    public AuthService(UserRepository userRepository,
                      PasswordEncoder passwordEncoder,
                      JwtTokenProvider tokenProvider,
                      EmailService emailService,
                      ModelMapper modelMapper) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.tokenProvider = tokenProvider;
        this.emailService = emailService;
        this.modelMapper = modelMapper;
    }

    /**
     * ‚úÖ INSCRIPTION ULTRA-ROBUSTE
     */
    public AuthResponse register(RegisterRequest request, String clientIp) {
        System.out.println("üîß D√©but de l'inscription pour: " + request.getEmail());
        
        try {
            // 1. Validation pr√©liminaire
            validateRegisterRequestStrict(request);
            System.out.println("‚úÖ Validation pr√©liminaire r√©ussie");

            // 2. Normalisation des donn√©es
            String email = request.getEmail().trim().toLowerCase();
            String name = request.getName().trim();
            String phone = request.getPhone() != null ? request.getPhone().trim() : null;
            
            System.out.println("‚úÖ Donn√©es normalis√©es - Email: " + email);

            // 3. V√©rification de l'unicit√© de l'email
            if (checkEmailExists(email)) {
                throw new IllegalArgumentException("Un utilisateur avec cet email existe d√©j√†");
            }
            System.out.println("‚úÖ Email unique v√©rifi√©");

            // 4. D√©termination du r√¥le
            User.UserRole role = determineUserRole(request.getRole());
            System.out.println("‚úÖ R√¥le d√©termin√©: " + role.getValue());

            // 5. Cr√©ation de l'utilisateur
            User user = createUserEntity(name, email, request.getPassword(), phone, role);
            System.out.println("‚úÖ Entit√© utilisateur cr√©√©e");

            // 6. Sauvegarde s√©curis√©e
            User savedUser = saveUserSecurely(user);
            System.out.println("‚úÖ Utilisateur sauvegard√© avec ID: " + savedUser.getId());

            // 7. Envoi de l'email de v√©rification (non bloquant)
            sendVerificationEmailAsync(savedUser);

            // 8. G√©n√©ration des tokens
            AuthResponse authResponse = generateAuthTokens(savedUser);
            System.out.println("‚úÖ Tokens g√©n√©r√©s avec succ√®s");

            return authResponse;

        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erreur de validation: " + e.getMessage());
            throw e;
        } catch (DataIntegrityViolationException e) {
            System.err.println("‚ùå Erreur de contrainte DB: " + e.getMessage());
            throw new IllegalArgumentException("Cette adresse email est d√©j√† utilis√©e");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur inattendue lors de l'inscription: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Erreur interne lors de l'inscription. Veuillez r√©essayer plus tard.");
        }
    }

    /**
     * ‚úÖ CONNEXION ULTRA-ROBUSTE
     */
    public AuthResponse login(LoginRequest request, String clientIp) {
        System.out.println("üîß D√©but de la connexion pour: " + request.getEmail());
        
        try {
            // 1. Validation des donn√©es
            validateLoginRequestStrict(request);
            System.out.println("‚úÖ Validation des donn√©es de connexion r√©ussie");

            // 2. Normalisation
            String email = request.getEmail().trim().toLowerCase();
            System.out.println("‚úÖ Email normalis√©: " + email);

            // 3. Recherche de l'utilisateur
            User user = findUserByEmailSecurely(email);
            System.out.println("‚úÖ Utilisateur trouv√©: " + user.getId());

            // 4. V√©rifications de s√©curit√©
            performSecurityChecks(user);
            System.out.println("‚úÖ V√©rifications de s√©curit√© pass√©es");

            // 5. V√©rification du mot de passe
            if (!verifyPassword(request.getPassword(), user.getPasswordHash())) {
                System.out.println("‚ùå Mot de passe incorrect pour: " + email);
                throw new BadCredentialsException("Email ou mot de passe incorrect");
            }
            System.out.println("‚úÖ Mot de passe v√©rifi√©");

            // 6. Mise √† jour de la derni√®re connexion
            updateLastLogin(user);
            System.out.println("‚úÖ Derni√®re connexion mise √† jour");

            // 7. G√©n√©ration des tokens
            AuthResponse authResponse = generateAuthTokens(user);
            System.out.println("‚úÖ Tokens de connexion g√©n√©r√©s");

            return authResponse;

        } catch (BadCredentialsException | IllegalStateException e) {
            System.out.println("‚ùå Erreur d'authentification: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur inattendue lors de la connexion: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Erreur interne lors de la connexion. Veuillez r√©essayer plus tard.");
        }
    }

    /**
     * ‚úÖ RAFRA√éCHISSEMENT DE TOKEN
     */
    public AuthResponse refreshToken(String refreshToken) {
        try {
            System.out.println("üîß Rafra√Æchissement de token");
            
            if (refreshToken == null || refreshToken.trim().isEmpty()) {
                throw new IllegalArgumentException("Token de rafra√Æchissement manquant");
            }

            if (!tokenProvider.validateToken(refreshToken)) {
                throw new IllegalArgumentException("Token de rafra√Æchissement invalide ou expir√©");
            }

            String userId = tokenProvider.getUserIdFromToken(refreshToken);
            User user = userRepository.findByIdAndActiveTrue(userId)
                .orElseThrow(() -> new IllegalArgumentException("Utilisateur non trouv√© ou inactif"));

            String newAccessToken = tokenProvider.generateToken(userId);
            UserResponse userResponse = modelMapper.mapUserToUserResponse(user);

            System.out.println("‚úÖ Token rafra√Æchi pour utilisateur: " + userId);

            return new AuthResponse(
                newAccessToken,
                refreshToken,
                "Bearer",
                jwtExpirationInMs / 1000,
                userResponse
            );

        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erreur de token: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du refresh: " + e.getMessage());
            throw new RuntimeException("Erreur lors du rafra√Æchissement du token");
        }
    }

    /**
     * ‚úÖ D√âCONNEXION
     */
    public void logout(String accessToken) {
        try {
            if (accessToken != null && !accessToken.trim().isEmpty()) {
                String userId = tokenProvider.getUserIdFromToken(accessToken);
                System.out.println("‚úÖ Utilisateur d√©connect√©: " + userId);
            }
        } catch (Exception e) {
            System.out.println("‚ÑπÔ∏è D√©connexion sans validation de token");
        }
    }

    // ‚úÖ M√âTHODES UTILITAIRES PRIV√âES

    private void validateRegisterRequestStrict(RegisterRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Donn√©es d'inscription manquantes");
        }

        if (isEmpty(request.getName())) {
            throw new IllegalArgumentException("Le nom est obligatoire");
        }

        if (request.getName().trim().length() > 120) {
            throw new IllegalArgumentException("Le nom ne peut pas d√©passer 120 caract√®res");
        }

        if (isEmpty(request.getEmail())) {
            throw new IllegalArgumentException("L'email est obligatoire");
        }

        if (!isValidEmailFormat(request.getEmail())) {
            throw new IllegalArgumentException("Format d'email invalide");
        }

        if (request.getEmail().trim().length() > 190) {
            throw new IllegalArgumentException("L'email ne peut pas d√©passer 190 caract√®res");
        }

        if (isEmpty(request.getPassword())) {
            throw new IllegalArgumentException("Le mot de passe est obligatoire");
        }

        if (request.getPassword().length() < 6) {
            throw new IllegalArgumentException("Le mot de passe doit contenir au moins 6 caract√®res");
        }

        if (request.getPassword().length() > 255) {
            throw new IllegalArgumentException("Le mot de passe ne peut pas d√©passer 255 caract√®res");
        }
    }

    private void validateLoginRequestStrict(LoginRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("Donn√©es de connexion manquantes");
        }

        if (isEmpty(request.getEmail())) {
            throw new IllegalArgumentException("L'email est obligatoire");
        }

        if (!isValidEmailFormat(request.getEmail())) {
            throw new IllegalArgumentException("Format d'email invalide");
        }

        if (isEmpty(request.getPassword())) {
            throw new IllegalArgumentException("Le mot de passe est obligatoire");
        }
    }

    private boolean checkEmailExists(String email) {
        try {
            return userRepository.existsByEmailAndActiveTrue(email);
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la v√©rification d'email: " + e.getMessage());
            throw new RuntimeException("Erreur lors de la v√©rification de l'email");
        }
    }

    private User.UserRole determineUserRole(String roleString) {
        if (isEmpty(roleString)) {
            return User.UserRole.MIXTE;
        }

        try {
            return User.UserRole.fromValue(roleString.trim().toLowerCase());
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è R√¥le invalide '" + roleString + "', utilisation de 'mixte'");
            return User.UserRole.MIXTE;
        }
    }

    private User createUserEntity(String name, String email, String password, String phone, User.UserRole role) {
        try {
            User user = new User();
            user.setId(java.util.UUID.randomUUID().toString());
            user.setName(name);
            user.setEmail(email);
            user.setPasswordHash(passwordEncoder.encode(password));
            user.setPhone(isEmpty(phone) ? null : phone);
            user.setRole(role);
            user.setEmailVerified(false);
            user.setActive(true);
            
            return user;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la cr√©ation de l'entit√©: " + e.getMessage());
            throw new RuntimeException("Erreur lors de la cr√©ation du compte");
        }
    }

    private User saveUserSecurely(User user) {
        try {
            return userRepository.save(user);
        } catch (DataIntegrityViolationException e) {
            System.err.println("‚ùå Violation de contrainte DB: " + e.getMessage());
            if (e.getMessage() != null && e.getMessage().toLowerCase().contains("email")) {
                throw new IllegalArgumentException("Cette adresse email est d√©j√† utilis√©e");
            }
            throw new IllegalArgumentException("Ces informations sont d√©j√† utilis√©es");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la sauvegarde: " + e.getMessage());
            throw new RuntimeException("Erreur lors de la cr√©ation du compte");
        }
    }

    private User findUserByEmailSecurely(String email) {
        try {
            return userRepository.findByEmailAndActiveTrue(email)
                .orElseThrow(() -> new BadCredentialsException("Email ou mot de passe incorrect"));
        } catch (BadCredentialsException e) {
            throw e;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la recherche utilisateur: " + e.getMessage());
            throw new RuntimeException("Erreur lors de la connexion");
        }
    }

    private void performSecurityChecks(User user) {
        if (!user.getActive()) {
            throw new IllegalStateException("Votre compte a √©t√© d√©sactiv√©");
        }

        if (user.getPasswordHash() == null || user.getPasswordHash().isEmpty()) {
            throw new BadCredentialsException("Ce compte n'a pas de mot de passe d√©fini");
        }
    }

    private boolean verifyPassword(String rawPassword, String encodedPassword) {
        try {
            return passwordEncoder.matches(rawPassword, encodedPassword);
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la v√©rification du mot de passe: " + e.getMessage());
            return false;
        }
    }

    private void updateLastLogin(User user) {
        try {
            user.setLastLoginAt(LocalDateTime.now());
            userRepository.save(user);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Erreur lors de la mise √† jour de la derni√®re connexion: " + e.getMessage());
            // Ne pas faire √©chouer la connexion pour √ßa
        }
    }

    private AuthResponse generateAuthTokens(User user) {
        try {
            String accessToken = tokenProvider.generateToken(user.getId());
            String refreshToken = tokenProvider.generateRefreshToken(user.getId());
            UserResponse userResponse = modelMapper.mapUserToUserResponse(user);

            return new AuthResponse(
                accessToken,
                refreshToken,
                "Bearer",
                jwtExpirationInMs / 1000,
                userResponse
            );
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration des tokens: " + e.getMessage());
            throw new RuntimeException("Erreur lors de la g√©n√©ration des tokens");
        }
    }

    private void sendVerificationEmailAsync(User user) {
        try {
            emailService.sendEmailVerification(user);
            System.out.println("‚úÖ Email de v√©rification envoy√© √†: " + user.getEmail());
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Erreur envoi email pour " + user.getEmail() + ": " + e.getMessage());
            // Ne pas faire √©chouer l'inscription pour un probl√®me d'email
        }
    }

    private boolean isEmpty(String str) {
        return str == null || str.trim().isEmpty();
    }

    private boolean isValidEmailFormat(String email) {
        if (isEmpty(email)) {
            return false;
        }
        
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.trim().matches(emailRegex);
    }

    // Stubs pour OAuth2 (d√©sactiv√© en d√©veloppement)
    public String getGoogleAuthUrl() {
        throw new UnsupportedOperationException("OAuth2 Google non configur√© en d√©veloppement");
    }

    public String getFacebookAuthUrl() {
        throw new UnsupportedOperationException("OAuth2 Facebook non configur√© en d√©veloppement");
    }

    public AuthResponse processOAuth2Callback(String provider, String code, String state, String clientIp) {
        throw new UnsupportedOperationException("OAuth2 " + provider + " non configur√© en d√©veloppement");
    }
}