package com.retrouvtout.exception;

import com.retrouvtout.dto.response.ApiResponse;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

import java.util.HashMap;
import java.util.Map;

/**
 * ‚úÖ GESTIONNAIRE GLOBAL DES EXCEPTIONS AVEC DEBUG AVANC√â
 * Logs d√©taill√©s pour identifier l'origine de l'erreur 500
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * ‚úÖ Gestion des erreurs de validation des donn√©es JSON
     */
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ApiResponse<Object>> handleHttpMessageNotReadableException(
            HttpMessageNotReadableException ex, WebRequest request) {
        
        System.err.println("‚ùå ERREUR JSON: " + ex.getMessage());
        ex.printStackTrace();
        
        ApiResponse<Object> response = new ApiResponse<>(
            false, 
            "Donn√©es JSON invalides ou malform√©es", 
            null
        );
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * ‚úÖ Gestion des erreurs de contrainte de base de donn√©es
     */
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ApiResponse<Object>> handleDataIntegrityViolationException(
            DataIntegrityViolationException ex, WebRequest request) {
        
        System.err.println("‚ùå ERREUR BASE DE DONN√âES: " + ex.getMessage());
        ex.printStackTrace();
        
        String message = "Erreur de donn√©es";
        
        // Analyser le message d'erreur pour donner des d√©tails utiles
        if (ex.getMessage() != null) {
            if (ex.getMessage().contains("email")) {
                message = "Cette adresse email est d√©j√† utilis√©e";
            } else if (ex.getMessage().contains("phone")) {
                message = "Ce num√©ro de t√©l√©phone est d√©j√† utilis√©";
            } else if (ex.getMessage().contains("Duplicate entry")) {
                message = "Ces informations sont d√©j√† utilis√©es par un autre utilisateur";
            }
        }
        
        ApiResponse<Object> response = new ApiResponse<>(false, message, null);
        return new ResponseEntity<>(response, HttpStatus.CONFLICT);
    }

    /**
     * ‚úÖ GESTION AM√âLIOR√âE DES ERREURS DE VALIDATION
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Object>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        
        System.err.println("‚ùå ERREUR DE VALIDATION: " + ex.getMessage());
        ex.printStackTrace();
        
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
            System.err.println("  - Champ '" + fieldName + "': " + errorMessage);
        });

        // Message principal bas√© sur la premi√®re erreur
        String mainMessage = "Erreurs de validation";
        if (!errors.isEmpty()) {
            mainMessage = errors.values().iterator().next();
        }

        ApiResponse<Object> response = new ApiResponse<>(false, mainMessage, errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Gestion des ressources non trouv√©es
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiResponse<Object>> handleResourceNotFoundException(
            ResourceNotFoundException ex, WebRequest request) {
        
        System.err.println("‚ùå RESSOURCE NON TROUV√âE: " + ex.getMessage());
        
        ApiResponse<Object> response = new ApiResponse<>(false, ex.getMessage(), null);
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    /**
     * Gestion des requ√™tes malform√©es
     */
    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<ApiResponse<Object>> handleBadRequestException(
            BadRequestException ex, WebRequest request) {
        
        System.err.println("‚ùå REQU√äTE MALFORM√âE: " + ex.getMessage());
        ex.printStackTrace();
        
        ApiResponse<Object> response = new ApiResponse<>(false, ex.getMessage(), null);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Gestion des erreurs d'authentification
     */
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ApiResponse<Object>> handleAuthenticationException(
            AuthenticationException ex, WebRequest request) {
        
        System.err.println("‚ùå ERREUR D'AUTHENTIFICATION: " + ex.getMessage());
        ex.printStackTrace();
        
        String message = ex instanceof BadCredentialsException ? 
            "Identifiants invalides" : "Erreur d'authentification";
        
        ApiResponse<Object> response = new ApiResponse<>(false, message, null);
        return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
    }

    /**
     * Gestion des erreurs d'autorisation
     */
    @ExceptionHandler(SecurityException.class)
    public ResponseEntity<ApiResponse<Object>> handleSecurityException(
            SecurityException ex, WebRequest request) {
        
        System.err.println("‚ùå ERREUR DE S√âCURIT√â: " + ex.getMessage());
        ex.printStackTrace();
        
        ApiResponse<Object> response = new ApiResponse<>(false, ex.getMessage(), null);
        return new ResponseEntity<>(response, HttpStatus.FORBIDDEN);
    }

    /**
     * ‚úÖ GESTION AM√âLIOR√âE DES ARGUMENTS ILL√âGAUX
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<Object>> handleIllegalArgumentException(
            IllegalArgumentException ex, WebRequest request) {
        
        System.err.println("‚ùå ARGUMENT ILL√âGAL: " + ex.getMessage());
        ex.printStackTrace();
        
        ApiResponse<Object> response = new ApiResponse<>(false, ex.getMessage(), null);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Gestion des √©tats ill√©gaux
     */
    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<ApiResponse<Object>> handleIllegalStateException(
            IllegalStateException ex, WebRequest request) {
        
        System.err.println("‚ùå √âTAT ILL√âGAL: " + ex.getMessage());
        ex.printStackTrace();
        
        ApiResponse<Object> response = new ApiResponse<>(false, ex.getMessage(), null);
        return new ResponseEntity<>(response, HttpStatus.CONFLICT);
    }

    /**
     * ‚úÖ GESTION AM√âLIOR√âE DES RuntimeException
     */
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ApiResponse<Object>> handleRuntimeException(
            RuntimeException ex, WebRequest request) {
        
        System.err.println("‚ùå RUNTIME EXCEPTION: " + ex.getClass().getSimpleName() + ": " + ex.getMessage());
        ex.printStackTrace();
        
        // Log de la stack trace compl√®te pour debug
        System.err.println("üìç Stack trace compl√®te:");
        for (StackTraceElement element : ex.getStackTrace()) {
            if (element.getClassName().contains("retrouvtout")) {
                System.err.println("  at " + element.toString());
            }
        }
        
        ApiResponse<Object> response = new ApiResponse<>(
            false, 
            ex.getMessage() != null ? ex.getMessage() : "Une erreur interne s'est produite", 
            null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * ‚úÖ GESTION DE TOUTES LES AUTRES EXCEPTIONS AVEC DEBUG MAXIMUM
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Object>> handleGlobalException(
            Exception ex, WebRequest request) {
        
        System.err.println("‚ùå EXCEPTION NON G√âR√âE: " + ex.getClass().getSimpleName() + ": " + ex.getMessage());
        System.err.println("üìç URL de la requ√™te: " + request.getDescription(false));
        
        // Log de la stack trace compl√®te
        System.err.println("üìç Stack trace compl√®te:");
        ex.printStackTrace();
        
        // Log des causes imbriqu√©es
        Throwable cause = ex.getCause();
        int level = 1;
        while (cause != null && level <= 3) {
            System.err.println("üìç Cause niveau " + level + ": " + cause.getClass().getSimpleName() + ": " + cause.getMessage());
            cause = cause.getCause();
            level++;
        }
        
        ApiResponse<Object> response = new ApiResponse<>(
            false, 
            "Une erreur interne s'est produite. Veuillez r√©essayer.", 
            null
        );
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}