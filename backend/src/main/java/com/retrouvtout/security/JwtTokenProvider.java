// backend/src/main/java/com/retrouvtout/security/JwtTokenProvider.java - DEBUG VERSION

package com.retrouvtout.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;

/**
 * ‚úÖ FOURNISSEUR JWT avec DEBUG MAXIMAL pour r√©soudre les probl√®mes d'auth
 */
@Component
public class JwtTokenProvider {

    @Value("${app.jwt.secret}")
    private String jwtSecret;

    @Value("${app.jwt.expiration}")
    private long jwtExpirationInMs;

    @Value("${app.jwt.refresh-expiration}")
    private long refreshTokenExpirationInMs;

    /**
     * ‚úÖ G√©n√©rer un token d'acc√®s JWT avec debug
     */
    public String generateToken(String userId) {
        try {
            System.out.println("üîß JWT - G√©n√©ration token pour userId: " + userId);
            
            if (userId == null || userId.trim().isEmpty()) {
                throw new IllegalArgumentException("UserID ne peut pas √™tre null ou vide");
            }
            
            Date now = new Date();
            Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());

            String token = Jwts.builder()
                .setSubject(userId)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(key, SignatureAlgorithm.HS512)
                .compact();

            System.out.println("‚úÖ Token JWT g√©n√©r√© avec succ√®s");
            System.out.println("  - UserID: " + userId);
            System.out.println("  - Expiration: " + expiryDate);
            System.out.println("  - Token (20 premiers chars): " + token.substring(0, Math.min(token.length(), 20)) + "...");
            
            return token;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration du token: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Impossible de g√©n√©rer le token JWT", e);
        }
    }

    /**
     * ‚úÖ Extraire l'ID utilisateur depuis le token JWT avec debug
     */
    public String getUserIdFromToken(String token) {
        try {
            System.out.println("üîß JWT - Extraction userId du token");
            System.out.println("  - Token (20 premiers chars): " + token.substring(0, Math.min(token.length(), 20)) + "...");
            
            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());
            
            Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();

            String userId = claims.getSubject();
            
            if (userId == null || userId.trim().isEmpty()) {
                System.err.println("‚ùå Subject (userId) manquant dans le token");
                throw new IllegalArgumentException("Token invalide: subject manquant");
            }
            
            System.out.println("‚úÖ UserID extrait avec succ√®s: " + userId);
            return userId;
            
        } catch (ExpiredJwtException e) {
            System.err.println("‚ùå Token expir√©");
            System.err.println("  - Expiration: " + e.getClaims().getExpiration());
            System.err.println("  - Maintenant: " + new Date());
            throw new RuntimeException("Token expir√©", e);
        } catch (UnsupportedJwtException e) {
            System.err.println("‚ùå Token non support√©: " + e.getMessage());
            throw new RuntimeException("Token non support√©", e);
        } catch (MalformedJwtException e) {
            System.err.println("‚ùå Token malform√©: " + e.getMessage());
            throw new RuntimeException("Token malform√©", e);
        } catch (SecurityException e) {
            System.err.println("‚ùå Signature invalide: " + e.getMessage());
            throw new RuntimeException("Signature de token invalide", e);
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Token vide ou null: " + e.getMessage());
            throw new RuntimeException("Token vide", e);
        } catch (Exception e) {
            System.err.println("‚ùå Erreur inattendue lors de l'extraction: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Erreur lors de l'analyse du token", e);
        }
    }

    /**
     * ‚úÖ Valider le token JWT avec debug d√©taill√©
     */
    public boolean validateToken(String authToken) {
        try {
            System.out.println("üîß JWT - Validation du token");
            System.out.println("  - Token (20 premiers chars): " + authToken.substring(0, Math.min(authToken.length(), 20)) + "...");
            
            if (authToken == null || authToken.trim().isEmpty()) {
                System.err.println("‚ùå Token null ou vide");
                return false;
            }
            
            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());
            
            Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(authToken)
                .getBody();
            
            Date expiration = claims.getExpiration();
            Date now = new Date();
            
            System.out.println("‚úÖ Token valid√© avec succ√®s");
            System.out.println("  - Subject: " + claims.getSubject());
            System.out.println("  - Issued At: " + claims.getIssuedAt());
            System.out.println("  - Expiration: " + expiration);
            System.out.println("  - Now: " + now);
            System.out.println("  - Is Expired: " + expiration.before(now));
            
            return true;
            
        } catch (ExpiredJwtException e) {
            System.err.println("‚ùå Token expir√© lors de la validation");
            System.err.println("  - Expiration: " + e.getClaims().getExpiration());
            System.err.println("  - Maintenant: " + new Date());
            return false;
        } catch (UnsupportedJwtException e) {
            System.err.println("‚ùå Token non support√© lors de la validation: " + e.getMessage());
            return false;
        } catch (MalformedJwtException e) {
            System.err.println("‚ùå Token malform√© lors de la validation: " + e.getMessage());
            return false;
        } catch (SecurityException e) {
            System.err.println("‚ùå Signature invalide lors de la validation: " + e.getMessage());
            return false;
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Argument invalide lors de la validation: " + e.getMessage());
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur inattendue lors de la validation: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * ‚úÖ G√©n√©rer un refresh token JWT
     */
    public String generateRefreshToken(String userId) {
        try {
            System.out.println("üîß JWT - G√©n√©ration refresh token pour userId: " + userId);
            
            Date now = new Date();
            Date expiryDate = new Date(now.getTime() + refreshTokenExpirationInMs);

            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());

            String token = Jwts.builder()
                .setSubject(userId)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .claim("type", "refresh")
                .signWith(key, SignatureAlgorithm.HS512)
                .compact();

            System.out.println("‚úÖ Refresh token g√©n√©r√© avec succ√®s pour utilisateur: " + userId);
            
            return token;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la g√©n√©ration du refresh token: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Impossible de g√©n√©rer le refresh token", e);
        }
    }

    /**
     * ‚úÖ Obtenir la date d'expiration du token
     */
    public Date getExpirationDateFromToken(String token) {
        try {
            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());
            
            Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();

            return claims.getExpiration();
            
        } catch (Exception e) {
            System.err.println("‚ùå Impossible d'obtenir l'expiration: " + e.getMessage());
            return null;
        }
    }

    /**
     * ‚úÖ V√©rifier si le token est expir√©
     */
    public boolean isTokenExpired(String token) {
        Date expiration = getExpirationDateFromToken(token);
        if (expiration == null) {
            return true;
        }
        boolean isExpired = expiration.before(new Date());
        System.out.println("üîß JWT - Token expir√©? " + isExpired + " (expire le " + expiration + ")");
        return isExpired;
    }

    /**
     * ‚úÖ M√©thode de debug pour analyser un token
     */
    public void debugToken(String token) {
        try {
            System.out.println("üîç JWT DEBUG - Analyse compl√®te du token");
            System.out.println("  - Longueur: " + token.length());
            System.out.println("  - D√©but: " + token.substring(0, Math.min(token.length(), 50)) + "...");
            
            SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes());
            Claims claims = Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();
            
            System.out.println("  - Subject: " + claims.getSubject());
            System.out.println("  - Issued At: " + claims.getIssuedAt());
            System.out.println("  - Expiration: " + claims.getExpiration());
            System.out.println("  - All Claims: " + claims);
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur debug token: " + e.getMessage());
        }
    }
}