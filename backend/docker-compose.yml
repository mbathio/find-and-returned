# docker-compose.yml pour l'environnement de développement Retrouv'Tout
version: '3.8'

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: retrouvtout-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: retrouvtout_dev
      MYSQL_USER: retrouvtout
      MYSQL_PASSWORD: retrouvtout123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - retrouvtout-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: retrouvtout-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - retrouvtout-network
    command: redis-server --appendonly yes

  # MailHog pour tester les emails en développement
  mailhog:
    image: mailhog/mailhog:latest
    container_name: retrouvtout-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Interface web
    networks:
      - retrouvtout-network

  # Application Spring Boot (optionnel pour le développement)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: retrouvtout-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:mysql://mysql:3306/retrouvtout_dev?useSSL=false&serverTimezone=UTC
      DB_USERNAME: retrouvtout
      DB_PASSWORD: retrouvtout123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      JWT_SECRET: development_secret_key_change_in_production
      FRONTEND_URL: http://localhost:3000
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - redis
      - mailhog
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - retrouvtout-network

  # PhpMyAdmin pour la gestion de la base de données (optionnel)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: retrouvtout-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: rootpassword
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - retrouvtout-network

  # Redis Commander pour la gestion de Redis (optionnel)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: retrouvtout-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - retrouvtout-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  retrouvtout-network:
    driver: bridge

---
# docker-compose.override.yml (pour surcharger en développement local)
version: '3.8'

services:
  app:
    # Désactiver le build automatique pour le développement local
    build: null
    image: null
    # Monter le code source pour le hot reload
    volumes:
      - .:/app
      - /app/target
    environment:
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true

---
# docker-compose.prod.yml (pour la production)
version: '3.8'

services:
  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-buffer-pool-size=1G

  redis:
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  app:
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=true&serverTimezone=UTC
      DB_USERNAME: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      FACEBOOK_CLIENT_ID: ${FACEBOOK_CLIENT_ID}
      FACEBOOK_CLIENT_SECRET: ${FACEBOOK_CLIENT_SECRET}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Service de sauvegarde automatique
  backup:
    image: mysql:8.0
    container_name: retrouvtout-backup
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh
    command: /bin/bash -c "chmod +x /backup.sh && /backup.sh"
    depends_on:
      - mysql
    networks:
      - retrouvtout-network

  # Service de monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: retrouvtout-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - retrouvtout-network

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_data:
    driver: local